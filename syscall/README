This lab had 2 questions to implement `trace_sys_call` and `attack.c`.

I'll focus first on `attack.c`. The xv6 kernel isolates user programs from each other and isolates the kernel from user programs. An application cannot directly call a function in another program.

The bug is that the call to `memset(mem, 0, sz)` at line 272 in `kernel/vm.c` to clear a newly-allocated page is omitted when compiling this lab. Similarly, when compiling, `user/secret.c` writes an 8-byte secret in its memory and then exits (which frees its memory). Your goal is to add a few lines of code to `user/attack.c` to find the secret.

You are allowed to modify `user/attack.c`, but you cannot make any other changes: you cannot modify the xv6 kernel sources, `secret.c`, `attacktest.c`, etc.

---

### SOLUTION:

Firstly, it is important to understand the RISC-V 3-level page table.

Here is a handwritten note explaining 3-level page tables in RISC-V:

[View Handwritten Note PDF](https://github.com/Sarthaki2005/xv6-lab-2024-solutions/blob/main/attack%5B1%5D.PDF)
